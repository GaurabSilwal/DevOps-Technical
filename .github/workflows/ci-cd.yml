name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install API dependencies
      run: |
        cd api-service
        npm install
    
    - name: Install Frontend dependencies
      run: |
        cd frontend-service
        npm install
    
    - name: Install Worker dependencies
      run: |
        cd worker-service
        pip install -r requirements.txt
    
    - name: Run API tests
      run: |
        cd api-service
        npm test
    
    - name: Run Frontend tests
      run: |
        cd frontend-service
        npm test -- --coverage --watchAll=false
    
    - name: Run Worker tests
      run: |
        cd worker-service
        python -m pytest || echo "No tests found"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [api-service, worker-service, frontend-service]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Deploy to Kubernetes
      run: |
        # Update image tags in manifests
        sed -i "s|api-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-service:${{ github.sha }}|g" k8s/api-service.yaml
        sed -i "s|worker-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/worker-service:${{ github.sha }}|g" k8s/worker-service.yaml
        sed -i "s|frontend-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend-service:${{ github.sha }}|g" k8s/frontend-service.yaml
        
        # Apply manifests
        kubectl apply -f k8s/
        
        # Wait for rollout
        kubectl rollout status deployment/api-service -n microservices --timeout=300s
        kubectl rollout status deployment/worker-service -n microservices --timeout=300s
        kubectl rollout status deployment/frontend-service -n microservices --timeout=300s